{"version":3,"sources":["webpack:///path---posts-type-script-interface-type-50e59af64ce055dc31d6.js","webpack:///./.cache/json/posts-type-script-interface-type.json"],"names":["webpackJsonp","557","module","exports","data","site","siteMetadata","title","subtitle","copyright","author","name","email","instagram","linkedin","github","rss","facebook","disqusShortname","url","markdownRemark","id","html","fields","tagSlugs","frontmatter","tags","date","description","pathContext","slug"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,cAAAC,SAAA,6IAAAC,UAAA,mCAAAC,QAAuOC,KAAA,KAAAC,MAAA,oBAAAC,UAAA,gBAAAC,SAAA,yBAAAC,OAAA,oBAAAC,IAAA,WAAAC,SAAA,WAA2KC,gBAAA,oBAAAC,IAAA,wCAAoFC,gBAAmBC,GAAA,8JAAAC,KAAA,0yYAAyiZC,QAA2dC,UAAA,6EAAwFC,aAAgBlB,MAAA,2CAAAmB,MAAA,8CAAAC,KAAA,2BAAAC,YAAA,uBAA+KC,aAAgBC,KAAA","file":"path---posts-type-script-interface-type-50e59af64ce055dc31d6.js","sourcesContent":["webpackJsonp([5507454951885],{\n\n/***/ 557:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"BK's Devlog\",\"subtitle\":\"I'm front-end web developer, former brand marketer, interested in business-oriented and scalable development. Also, passionate marathoner.\",\"copyright\":\"powerd by Gatsby, theme by lumen\",\"author\":{\"name\":\"BK\",\"email\":\"beom911@gmail.com\",\"instagram\":\"kim.andrea.by\",\"linkedin\":\"beomyeon-kim-a9b453128\",\"github\":\"beomyeonandrewkim\",\"rss\":\"/rss.xml\",\"facebook\":\"beom911\"},\"disqusShortname\":\"beomyeonandrewkim\",\"url\":\"https://beomyeonandrewkim.github.io\"}},\"markdownRemark\":{\"id\":\"/Users/beomyeonandreakim/Documents/dev/beomyeonandrewkim.github.io/src/pages/articles/2022-02-01_interface-type/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h3>아이템 13 타입과 인터페이스의 차이점 알기</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token comment\\\">// type</span>\\n<span class=\\\"token keyword\\\">type</span> TState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  capital<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// interface</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IState</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  capital<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ul>\\n<li>둘의 공통점</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token comment\\\">// 1. 추가 속성을 할당한다면 오류</span>\\n<span class=\\\"token keyword\\\">const</span> wyoming<span class=\\\"token punctuation\\\">:</span> TState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Wyoming'</span><span class=\\\"token punctuation\\\">,</span>\\n\\tcapital<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Cheyenne'</span><span class=\\\"token punctuation\\\">,</span>\\n\\tpopulation<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">500</span>_000<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// => error!</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 2. 인덱스 시그니처 모두 사용 가능</span>\\n<span class=\\\"token keyword\\\">type</span> TDict <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">:</span><span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IDict</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">:</span><span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 3. 함수 타입 정의 가능</span>\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token function-variable function\\\">TFn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">:</span><span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IFn</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">:</span><span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// + 추가적인 속성</span>\\n<span class=\\\"token keyword\\\">type</span> TFnWithProperties <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">:</span><span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>nunber<span class=\\\"token punctuation\\\">;</span>\\n\\tprop<span class=\\\"token punctuation\\\">:</span><span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IFnWithProperties</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">:</span><span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> nunber<span class=\\\"token punctuation\\\">;</span>\\n\\tprop<span class=\\\"token punctuation\\\">:</span><span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 4. 모두 제너릭 가능</span>\\n<span class=\\\"token keyword\\\">type</span> TParir<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>T</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tfirst<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">;</span>\\n\\tsecond<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IPair</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>T</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token punctuation\\\">{</span>\\n\\tfirst<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">;</span>\\n\\tsecond<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 5. 확장 가능</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IStateWithPop</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">TState</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tpopulation<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">type</span> TStateWIthPop <span class=\\\"token operator\\\">=</span> IState <span class=\\\"token operator\\\">&amp;</span> <span class=\\\"token punctuation\\\">{</span> population<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 연산자를 통해 복잡한 타입확장 가능</span>\\n\\n<span class=\\\"token comment\\\">// 6. Class의 implements로 사용가능</span></code></pre>\\n      </div>\\n<ul>\\n<li>둘의 차이점</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token comment\\\">// 1. 유니온은 type만 가능</span>\\n<span class=\\\"token keyword\\\">type</span> AorB <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'a'</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// +유니온을 확장해야하는 경우 interface에서 이런식으로 처리는 가능하지만</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">VariableMap</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token punctuation\\\">[</span>name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> Input <span class=\\\"token operator\\\">|</span> Output<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 하지만 이런 확장은 type만 가능 => 좀더 유연한 타입확장 가능</span>\\n<span class=\\\"token keyword\\\">type</span> NamedVariable <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>Input <span class=\\\"token operator\\\">|</span> Output<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 2. 튜플과 배열 타입도 type 키워드를 이용해 더 간결하게 표현</span>\\n<span class=\\\"token keyword\\\">type</span> Pair <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">type</span> StringList <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">type</span> NamedNums <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// X => Tuple의 native 메소드를 사용할 수 없음</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Tuple</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n\\tlength<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 3. interface는 선언 병합(declaration merging)이 가능</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IState</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n\\tcapital<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IState</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tpopulation<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">const</span> wyoming<span class=\\\"token punctuation\\\">:</span> IState <span class=\\\"token punctuation\\\">{</span>\\n\\tname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Wyoming'</span><span class=\\\"token punctuation\\\">,</span>\\n\\tcapital<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Cheyenne'</span><span class=\\\"token punctuation\\\">,</span>\\n\\tpopulation<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">000</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token comment\\\">// 정상</span></code></pre>\\n      </div>\\n<ul>\\n<li>복잡한 타입이라면 <code class=\\\"language-text\\\">type</code> 추천</li>\\n<li>간단한 객체 타입이라면 일관성과 보강의 관점에서 고려 ⇒ <code class=\\\"language-text\\\">interface</code></li>\\n<li>어떤 API에 대한 타입 선언을 작성해야 하고 API가 변경될 때 사용자가 인터페이스를 통해 새로운 필드를 병합할 수 있어서 유용한건 ⇒ <code class=\\\"language-text\\\">interface</code></li>\\n</ul>\\n<p>출처 <a href=\\\"https://www.yes24.com/Product/Goods/102124327\\\">이펙티브 타입스크립트</a></p>\",\"fields\":{\"tagSlugs\":[\"/tags/type-script/\",\"/tags/java-script/\",\"/tags/interface/\",\"/tags/type/\"]},\"frontmatter\":{\"title\":\"[이펙티브 타입스크립트] 아이템 13 - 타입과 인터페이스의 차이점 알기\",\"tags\":[\"TypeScript\",\"JavaScript\",\"interface\",\"type\"],\"date\":\"2022-02-01T09:15:03.284Z\",\"description\":\"타입과 인터페이스의 차이점 알기\"}}},\"pathContext\":{\"slug\":\"/posts/TypeScript/interface-type\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-type-script-interface-type-50e59af64ce055dc31d6.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"BK's Devlog\",\"subtitle\":\"I'm front-end web developer, former brand marketer, interested in business-oriented and scalable development. Also, passionate marathoner.\",\"copyright\":\"powerd by Gatsby, theme by lumen\",\"author\":{\"name\":\"BK\",\"email\":\"beom911@gmail.com\",\"instagram\":\"kim.andrea.by\",\"linkedin\":\"beomyeon-kim-a9b453128\",\"github\":\"beomyeonandrewkim\",\"rss\":\"/rss.xml\",\"facebook\":\"beom911\"},\"disqusShortname\":\"beomyeonandrewkim\",\"url\":\"https://beomyeonandrewkim.github.io\"}},\"markdownRemark\":{\"id\":\"/Users/beomyeonandreakim/Documents/dev/beomyeonandrewkim.github.io/src/pages/articles/2022-02-01_interface-type/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h3>아이템 13 타입과 인터페이스의 차이점 알기</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token comment\\\">// type</span>\\n<span class=\\\"token keyword\\\">type</span> TState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  capital<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// interface</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IState</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  capital<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ul>\\n<li>둘의 공통점</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token comment\\\">// 1. 추가 속성을 할당한다면 오류</span>\\n<span class=\\\"token keyword\\\">const</span> wyoming<span class=\\\"token punctuation\\\">:</span> TState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Wyoming'</span><span class=\\\"token punctuation\\\">,</span>\\n\\tcapital<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Cheyenne'</span><span class=\\\"token punctuation\\\">,</span>\\n\\tpopulation<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">500</span>_000<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// => error!</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 2. 인덱스 시그니처 모두 사용 가능</span>\\n<span class=\\\"token keyword\\\">type</span> TDict <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">:</span><span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IDict</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">:</span><span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 3. 함수 타입 정의 가능</span>\\n<span class=\\\"token keyword\\\">type</span> <span class=\\\"token function-variable function\\\">TFn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">:</span><span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IFn</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">:</span><span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// + 추가적인 속성</span>\\n<span class=\\\"token keyword\\\">type</span> TFnWithProperties <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">:</span><span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>nunber<span class=\\\"token punctuation\\\">;</span>\\n\\tprop<span class=\\\"token punctuation\\\">:</span><span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IFnWithProperties</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">:</span><span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> nunber<span class=\\\"token punctuation\\\">;</span>\\n\\tprop<span class=\\\"token punctuation\\\">:</span><span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 4. 모두 제너릭 가능</span>\\n<span class=\\\"token keyword\\\">type</span> TParir<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>T</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tfirst<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">;</span>\\n\\tsecond<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IPair</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>T</span><span class=\\\"token punctuation\\\">></span></span> <span class=\\\"token punctuation\\\">{</span>\\n\\tfirst<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">;</span>\\n\\tsecond<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token constant\\\">T</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 5. 확장 가능</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IStateWithPop</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">TState</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tpopulation<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">type</span> TStateWIthPop <span class=\\\"token operator\\\">=</span> IState <span class=\\\"token operator\\\">&amp;</span> <span class=\\\"token punctuation\\\">{</span> population<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 연산자를 통해 복잡한 타입확장 가능</span>\\n\\n<span class=\\\"token comment\\\">// 6. Class의 implements로 사용가능</span></code></pre>\\n      </div>\\n<ul>\\n<li>둘의 차이점</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token comment\\\">// 1. 유니온은 type만 가능</span>\\n<span class=\\\"token keyword\\\">type</span> AorB <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'a'</span> <span class=\\\"token operator\\\">|</span> <span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// +유니온을 확장해야하는 경우 interface에서 이런식으로 처리는 가능하지만</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">VariableMap</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token punctuation\\\">[</span>name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">:</span> Input <span class=\\\"token operator\\\">|</span> Output<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 하지만 이런 확장은 type만 가능 => 좀더 유연한 타입확장 가능</span>\\n<span class=\\\"token keyword\\\">type</span> NamedVariable <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>Input <span class=\\\"token operator\\\">|</span> Output<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&amp;</span> <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 2. 튜플과 배열 타입도 type 키워드를 이용해 더 간결하게 표현</span>\\n<span class=\\\"token keyword\\\">type</span> Pair <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">type</span> StringList <span class=\\\"token operator\\\">=</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">type</span> NamedNums <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// X => Tuple의 native 메소드를 사용할 수 없음</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Tuple</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n\\tlength<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 3. interface는 선언 병합(declaration merging)이 가능</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IState</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n\\tcapital<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">IState</span> <span class=\\\"token punctuation\\\">{</span>\\n\\tpopulation<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">const</span> wyoming<span class=\\\"token punctuation\\\">:</span> IState <span class=\\\"token punctuation\\\">{</span>\\n\\tname<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Wyoming'</span><span class=\\\"token punctuation\\\">,</span>\\n\\tcapital<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Cheyenne'</span><span class=\\\"token punctuation\\\">,</span>\\n\\tpopulation<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">500</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">000</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token comment\\\">// 정상</span></code></pre>\\n      </div>\\n<ul>\\n<li>복잡한 타입이라면 <code class=\\\"language-text\\\">type</code> 추천</li>\\n<li>간단한 객체 타입이라면 일관성과 보강의 관점에서 고려 ⇒ <code class=\\\"language-text\\\">interface</code></li>\\n<li>어떤 API에 대한 타입 선언을 작성해야 하고 API가 변경될 때 사용자가 인터페이스를 통해 새로운 필드를 병합할 수 있어서 유용한건 ⇒ <code class=\\\"language-text\\\">interface</code></li>\\n</ul>\\n<p>출처 <a href=\\\"https://www.yes24.com/Product/Goods/102124327\\\">이펙티브 타입스크립트</a></p>\",\"fields\":{\"tagSlugs\":[\"/tags/type-script/\",\"/tags/java-script/\",\"/tags/interface/\",\"/tags/type/\"]},\"frontmatter\":{\"title\":\"[이펙티브 타입스크립트] 아이템 13 - 타입과 인터페이스의 차이점 알기\",\"tags\":[\"TypeScript\",\"JavaScript\",\"interface\",\"type\"],\"date\":\"2022-02-01T09:15:03.284Z\",\"description\":\"타입과 인터페이스의 차이점 알기\"}}},\"pathContext\":{\"slug\":\"/posts/TypeScript/interface-type\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-type-script-interface-type.json\n// module id = 557\n// module chunks = 5507454951885"],"sourceRoot":""}