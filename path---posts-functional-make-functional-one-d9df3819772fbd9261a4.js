webpackJsonp([62947462206030],{538:function(n,s){n.exports={data:{site:{siteMetadata:{title:"BK's Devlog",subtitle:"I'm front-end web developer, former marketer, interested in business-oriented and scalable development. Also, passionate marathoner.",copyright:"powerd by Gatsby, theme by lumen",author:{name:"BK",email:"beom911@gmail.com",instagram:"kim.andrea.by",linkedin:"beomyeon-kim-a9b453128",github:"beomyeonandrewkim",rss:"/rss.xml",facebook:"beom911"},disqusShortname:"beomyeonandrewkim",url:"https://beomyeonandrewkim.github.io"}},markdownRemark:{id:"/Users/beomyeonandreakim/Documents/dev/beomyeonandrewkim.github.io/src/pages/articles/2020-04-26_make_functional_one/index.md absPath of file >>> MarkdownRemark",html:'<p>이직한 회사에서 함수형 프로그래밍을 적용해본지 언 1년이 다되어간다.</p>\n<p>아직 Rx.JS 같은 라이브러리를 자유자재로 사용하는 레벨은 아니지만, Ramda.js를 활용해서 몇몇 유틸리티 함수를 함수형 형태를 가진 함수로 틈틈히 만들어 나가고 있다.</p>\n<p>그 중 몇가지 리팩토링 사례를 소개하고자 한다.</p>\n<p>먼저 아래 코드는 프론트엔드 개발자가 된지 3개월차 쯤에 만들었던 코드다.</p>\n<p>React 프로젝트에서 Input에 숫자를 입력하면 세자리수 마다 콤마(,)를 입력해주는 일종의 cleaner 함수다.</p>\n<p>유효한 string을 amount string이라 명명하겠다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// event.target.validity 객체를 유효하게 만들어주는 input의 pattern propoerty에 넣은 값이다.</span>\n<span class="token keyword">const</span> pattern <span class="token operator">=</span> <span class="token string">"[0-9 _,]*"</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 이 함수의 return이 유효하면 setState에 값을 업데이트해주고 false가 나올시 setState 이전에 함수를 return 해버린다</span>\n<span class="token keyword">const</span> <span class="token function-variable function">changeInputValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> validity<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    name <span class="token operator">===</span> <span class="token string">"ratio"</span> <span class="token operator">||</span>\n    name <span class="token operator">===</span> <span class="token string">"tokenAmount"</span> <span class="token operator">||</span>\n    name <span class="token operator">===</span> <span class="token string">"tokenSupply"</span> <span class="token operator">||</span>\n    name <span class="token operator">===</span> <span class="token string">"amount"</span> <span class="token operator">||</span>\n    name <span class="token operator">===</span> <span class="token string">"bonusRatio"</span> <span class="token operator">||</span>\n    name <span class="token operator">===</span> <span class="token string">"contractCap"</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> commaDeleted<span class="token punctuation">,</span> commaReinserted<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> newValueArr <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> beforeDotValue <span class="token operator">=</span> newValueArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      commaDeleted <span class="token operator">=</span> beforeDotValue<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/,/gi</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      commaReinserted <span class="token operator">=</span> commaDeleted<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/(?=(?:\\d{3})+$)/</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> finalVlaue <span class="token operator">=</span> commaReinserted <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> newValueArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">return</span>  validity<span class="token punctuation">.</span>valid <span class="token operator">?</span> finalVlaue <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      commaDeleted <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/,/gi</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      commaReinserted <span class="token operator">=</span> commaDeleted<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/(?=(?:\\d{3})+$)/</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> validity<span class="token punctuation">.</span>valid <span class="token operator">?</span> commaReinserted <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span></code></pre>\n      </div>\n<p>3개월차의 코드 답게(?) 딱봐도 이해할 수가 없다.</p>\n<p>공통된 정규식도 변수처리가 안되어있고 같은 역할을 하는 함수들 역시 모듈화가 안되어있어 비효율적이다.</p>\n<p>이 함수를 Ramda.js를 활용해 리팩토링 해보겠다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> insertComma <span class="token operator">=</span> <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span>\n    <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\',\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/(?=(?:\\d{3})+$)/</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/,/gi</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">numberWithDotCleaner</span> <span class="token operator">=</span> value <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">[</span>beforeDot<span class="token punctuation">,</span> afterDot<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'.\'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'.\'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">insertComma</span><span class="token punctuation">(</span>beforeDot<span class="token punctuation">)</span><span class="token punctuation">,</span> afterDot<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  cleaner <span class="token operator">=</span> <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span>\n    <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">ifElse</span><span class="token punctuation">(</span>\n      <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token regex">/^(?!,$)[\\d,.]+$/g</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">ifElse</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token string">\'.\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> numberWithDotCleaner<span class="token punctuation">,</span> insertComma<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token constant">R</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token punctuation">.</span>__<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token constant">R</span><span class="token punctuation">.</span>trim\n  <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>사실 완벽한 함수형으로 된 것도 아니고 중간에 Ramda.js로 짠 함수가 아닌 부분도 있다.</p>\n<p>먼저 <code class="language-text">insertComma</code> 함수를 통해 콤마를 넣어주는 로직을 공통 모듈화 시켰다. ES6에도 있는 기본 함수들로 구성되어있다. 콤마 제거 후 다시 세자리 단위로 나눈뒤 콤마로 join해주는 로직이다.</p>\n<p>그리고 소수점이 있을 경우엔 소수점 기준으로 앞의 String만 <code class="language-text">insertComma</code> 돌려주는 로직을 넣었다. 이 부분도 Ramda로 만들어 줄 수 있을 것 같은데 일단 map으로는 되지 않는 상황이다.</p>\n<p>그리고 최종적으로 trim을 해준되 유효한 amount string인지 확인해주는 정규식을 기준으로 유효하다면 콤마를 다시 넣어주는 함수를 실행시키고 숫자이외에 다른 string이 들어간다면 slice를 해준다.</p>\n<p>사실 로직 자체는 그렇게 효율적이지 않다. 그냥 조작하는 input과 보여주는 input을 다르게 한다던지, <code class="language-text">cleave.js</code> 같은 라이브러리를 쓴다던지 더 효율적인 방법은 많다.</p>\n<p>그래도 함수형으로 리팩토링 하기엔 적절한 더티 코드였기에 한 번 리팩토링을 해봤다.</p>\n<p>앞으로도 Ramda를 활용해 함수형으로 리팩토링을 해보기를 조금씩 만들어볼 예정이다.</p>\n<p>아직 타입 선언이던지 여러가지로 문제가 많지만 가독성 끝판왕의 함수형 프로그래밍이 빨리 프론트엔드의 주류가 되었으면 하는 바램이다.</p>',fields:{tagSlugs:["/tags/functional/","/tags/java-script/","/tags/ramda-js/"]},frontmatter:{title:"[함수형 프로그래밍] 첫 프로젝트 코드를 함수형으로 리팩토링 해보기 - Make amout string",tags:["functional","JavaScript","Ramda.js"],date:"2020-04-26T09:15:03.284Z",description:"이직한 회사에서 함수형 프로그래밍을 적용해본지 언 1년이 다되어간다."}}},pathContext:{slug:"/posts/functional/make-functional-one"}}}});
//# sourceMappingURL=path---posts-functional-make-functional-one-d9df3819772fbd9261a4.js.map