{"version":3,"sources":["webpack:///path---posts-type-script-typescript-overview-3c6ac43cdd93db861459.js","webpack:///./.cache/json/posts-type-script-typescript-overview.json"],"names":["webpackJsonp","559","module","exports","data","site","siteMetadata","title","subtitle","copyright","author","name","email","instagram","linkedin","github","rss","facebook","disqusShortname","url","markdownRemark","id","html","fields","tagSlugs","frontmatter","tags","date","description","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,cAAAC,SAAA,uIAAAC,UAAA,mCAAAC,QAAiOC,KAAA,KAAAC,MAAA,oBAAAC,UAAA,gBAAAC,SAAA,yBAAAC,OAAA,oBAAAC,IAAA,WAAAC,SAAA,WAA2KC,gBAAA,oBAAAC,IAAA,wCAAoFC,gBAAmBC,GAAA,mKAAAC,KAAA,63PAAouOC,QAA0lCC,UAAA,4CAAuDC,aAAgBlB,MAAA,+BAAAmB,MAAA,2BAAAC,KAAA,2BAAAC,YAAA,sIAA+PC,aAAgBC,KAAA","file":"path---posts-type-script-typescript-overview-3c6ac43cdd93db861459.js","sourcesContent":["webpackJsonp([170747210105423],{\n\n/***/ 559:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"BK's Devlog\",\"subtitle\":\"I'm front-end web developer, former marketer, interested in business-oriented and scalable development. Also, passionate marathoner.\",\"copyright\":\"powerd by Gatsby, theme by lumen\",\"author\":{\"name\":\"BK\",\"email\":\"beom911@gmail.com\",\"instagram\":\"kim.andrea.by\",\"linkedin\":\"beomyeon-kim-a9b453128\",\"github\":\"beomyeonandrewkim\",\"rss\":\"/rss.xml\",\"facebook\":\"beom911\"},\"disqusShortname\":\"beomyeonandrewkim\",\"url\":\"https://beomyeonandrewkim.github.io\"}},\"markdownRemark\":{\"id\":\"/Users/beomyeonandreakim/Documents/dev/beomyeonandrewkim.github.io/src/pages/articles/2022-01-18_typescript-overview/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1>1장 타입스크립트 알아보기</h1>\\n<h2>아이템 1 타입스크립트와 자바스크립트의 관계 이해하기</h2>\\n<ul>\\n<li>타입스크립트는 자바스크립트의 상위집합입니다. 다시 말해서, 모든 자바스크립트 프로그램은 이미 타입스크립트 프로그램입니다. 반대로, 타입스크립트는 별도의 문법을 가지고 있기 때문에 일반적으로 유효한 자바스크립트 프로그램이 아닙니다.</li>\\n<li>타입스크립트는 자바스크립트 런타임 동작을 모델링하는 타입 시스템을 가지고 있기 때문에 런타임 오류를 발생시키는 코드를 찾아내려고 합니다. 그러나 모든 오류를 찾아내리라 기대하면 안 됩니다. 타입 체커를 통과하면서도 런타임 오류를 발생시키는 코드는 충분히 존재할 수 있습니다.</li>\\n<li>타입스크립트 타입 시스템은 전반적으로 자바스크립트 동작을 모델링합니다. 그러나 잘못된 매개변수 개수로 함수를 호출하는 경우처럼, 자바스크립트에서는 허용되지만 타입스크립트에서는 문제가 되는 경우도 있습니다. 이러한 문법의 엄격함은 온전히 취향 차이이며 우열을 가릴 수 없는 문제입니다.</li>\\n</ul>\\n<h2>아이템2 타입스크립트 설정 이해하기</h2>\\n<ul>\\n<li>타입스크립트 컴파일러는 언어의 핵심 요소에 영향을 미치는 몇가지 설정을 포함하고 있습니다.</li>\\n<li>타입스크립트 설정은 커맨드 라인을 이용하기보다는 <code class=\\\"language-text\\\">tsconfig.json</code>을 사용하는 것이 좋습니다.</li>\\n<li>자바스크립트 프로젝트를 타입스크립트로 전환하는게 아니라면 <code class=\\\"language-text\\\">noImplicitAny</code>를 설정하는 것이 좋습니다.</li>\\n<li>“<code class=\\\"language-text\\\">undefined</code>는 객체가 아닙니다” 같은 런타임 오류를 방지하기 위해 <code class=\\\"language-text\\\">strictNullChecks</code>를 설정하는 것이 좋습니다.</li>\\n<li>타입스크립트에서 엄격한 체크를 하고 싶다면 strict 설정을 고려해야 합니다.</li>\\n</ul>\\n<h2>아이템3 코드 생성과 타입이 관계없음을 이해하기</h2>\\n<ul>\\n<li>코드 생성은 타입 시스템과 무관합니다. 타입스크립트 타입은 런타임 동작이나 성능에 영향을 주지 않습니다.</li>\\n<li>타입 오류가 존재하더라도 코드 생성(컴파일)은 가능합니다.</li>\\n<li>타입스크립트 타입은 런타임에 사용할 수 없습니다. 런타임에 타입을 지정하려면, 타입 정보 유지를 위한 별도의 방법이 필요합니다. 일반적으로는 태그된 유니온 속성 체크 방법을 사용합니다. 또는 클래스 같이 타입스크립트 타입과 런타임 값, 둘 다 제공하는 방법이 있습니다.</li>\\n</ul>\\n<h2>아이템 4 구조적 타이핑에 익숙해지기</h2>\\n<ul>\\n<li>자바스크립트가 덕 타이핑(duck typing) 기반이고 타입스크립트가 이를 모델링하기 위해 구조적 타이핑을 사용함을 이해해야 합니다. 어떤 인터페이스에 할당 가능한 값이라면 타입 선언에 명시적으로 나열된 속성들을 가지고 있을 겁니다. 타입은 봉인되어 있지 않습니다.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Vector2D</span> <span class=\\\"token punctuation\\\">{</span>\\n  x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n  y<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">calculateLength</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">:</span> Vector2D<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sqrt</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">*</span> v<span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">+</span> v<span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">*</span> v<span class=\\\"token punctuation\\\">.</span>y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">NamedVector</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n  y<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> v<span class=\\\"token punctuation\\\">:</span> NamedVector <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Zee'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">calculateLength</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 타입스크립트 타입 시스템은 자바스크립트의 런타임 동작을 모델링</span>\\n<span class=\\\"token comment\\\">// NamedVector의 구조가 Vector2D와 호환되기 때문에 calculateLength 호출이 가능</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Venctor3D</span> <span class=\\\"token punctuation\\\">{</span>\\n  x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n  y<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n  z<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">normalize</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">:</span> Vector3D<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> length <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">calculateLength</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    x<span class=\\\"token punctuation\\\">:</span> v<span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">/</span> length<span class=\\\"token punctuation\\\">,</span>\\n    y<span class=\\\"token punctuation\\\">:</span> v<span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">/</span> length<span class=\\\"token punctuation\\\">,</span>\\n    z<span class=\\\"token punctuation\\\">:</span> v<span class=\\\"token punctuation\\\">.</span>z <span class=\\\"token operator\\\">/</span> length<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">normalize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> z<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// { x: 0.6, y: 0.8, z:1 };</span>\\n\\n<span class=\\\"token comment\\\">// Vector3D와 호환되는 {x, y, z} 객체로 calculateLength를 호출하면, 구조적 타이핑 관점에서</span>\\n<span class=\\\"token comment\\\">// x와 y가 있어서 Vector2D와 호환됩니다. 따라서 오류가 발생하지 발생하지 않았습니다.</span>\\n<span class=\\\"token comment\\\">// 함수를 작성할 때, 호출에 사용되는 매개변수의 속성들이 매개변수 타입에 선언된 속성만을 가질거라 생각하기 쉬움</span>\\n<span class=\\\"token comment\\\">// 이러한 타입은 봉인된(sealed) 또는 정확한(precise) 타입이라 불리우는데 타입스크립트는 아님</span>\\n<span class=\\\"token comment\\\">// 좋든 싫든 열려(open) 있음</span></code></pre>\\n      </div>\\n<ul>\\n<li>클래스 역시 구조적 타이핑 규칙을 따른다는 것을 명심해야 합니다. 클래스의 인스턴스가 예상과 다를 수 있습니다.</li>\\n<li>구조적 타이핑을 사용하면 유닛 테스팅을 손쉽게 할 수 있습니다.</li>\\n</ul>\\n<h2>아이템 5 any 타입 지양하기</h2>\\n<ol>\\n<li>\\n<p>any 타입에는 타입 안정성이 없습니다.</p>\\n</li>\\n<li>\\n<p>any는 함수 시그니처를 무시해 버립니다.</p>\\n</li>\\n<li>\\n<p>any 타입에는 언어 서비스가 적용되지 않습니다.</p>\\n</li>\\n<li>\\n<p>any타입은 코드 리팩터링 때 버그를 감춥니다.</p>\\n</li>\\n<li>\\n<p>any는 타입 설계를 감춰버립니다.</p>\\n</li>\\n<li>\\n<p>any는 타입시스템의 신뢰도를 떨어뜨립니다.</p>\\n</li>\\n<li>\\n<p>any 타입을 사용하면 타입 체커와 타입스크립트 언어 서비스를 무력화시켜 버립니다. any 타입은 진짜 문제점을 감추며, 개발 경험을 나쁘게 하고, 타입 시스템으 신뢰도를 떨어뜨립니다. 최대한 사용을 피하도록 합시다.</p>\\n</li>\\n</ol>\\n<p>출처 <a href=\\\"https://www.yes24.com/Product/Goods/102124327\\\">이펙티브 타입스크립트</a></p>\",\"fields\":{\"tagSlugs\":[\"/tags/type-script/\",\"/tags/java-script/\"]},\"frontmatter\":{\"title\":\"[이펙티브 타입스크립트] 1장 타입스크립트 알아보기\",\"tags\":[\"TypeScript\",\"JavaScript\"],\"date\":\"2022-01-18T09:15:03.284Z\",\"description\":\"타입스크립트는 자바스크립트의 상위집합입니다. 다시 말해서, 모든 자바스크립트 프로그램은 이미 타입스크립트 프로그램입니다. 반대로, 타입스크립트는 별도의 문법을 가지고 있기 때문에 일반적으로 유효한 자바스크립트 프로그램이 아닙니다.\"}}},\"pathContext\":{\"slug\":\"/posts/TypeScript/typescript-overview\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-type-script-typescript-overview-3c6ac43cdd93db861459.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"BK's Devlog\",\"subtitle\":\"I'm front-end web developer, former marketer, interested in business-oriented and scalable development. Also, passionate marathoner.\",\"copyright\":\"powerd by Gatsby, theme by lumen\",\"author\":{\"name\":\"BK\",\"email\":\"beom911@gmail.com\",\"instagram\":\"kim.andrea.by\",\"linkedin\":\"beomyeon-kim-a9b453128\",\"github\":\"beomyeonandrewkim\",\"rss\":\"/rss.xml\",\"facebook\":\"beom911\"},\"disqusShortname\":\"beomyeonandrewkim\",\"url\":\"https://beomyeonandrewkim.github.io\"}},\"markdownRemark\":{\"id\":\"/Users/beomyeonandreakim/Documents/dev/beomyeonandrewkim.github.io/src/pages/articles/2022-01-18_typescript-overview/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1>1장 타입스크립트 알아보기</h1>\\n<h2>아이템 1 타입스크립트와 자바스크립트의 관계 이해하기</h2>\\n<ul>\\n<li>타입스크립트는 자바스크립트의 상위집합입니다. 다시 말해서, 모든 자바스크립트 프로그램은 이미 타입스크립트 프로그램입니다. 반대로, 타입스크립트는 별도의 문법을 가지고 있기 때문에 일반적으로 유효한 자바스크립트 프로그램이 아닙니다.</li>\\n<li>타입스크립트는 자바스크립트 런타임 동작을 모델링하는 타입 시스템을 가지고 있기 때문에 런타임 오류를 발생시키는 코드를 찾아내려고 합니다. 그러나 모든 오류를 찾아내리라 기대하면 안 됩니다. 타입 체커를 통과하면서도 런타임 오류를 발생시키는 코드는 충분히 존재할 수 있습니다.</li>\\n<li>타입스크립트 타입 시스템은 전반적으로 자바스크립트 동작을 모델링합니다. 그러나 잘못된 매개변수 개수로 함수를 호출하는 경우처럼, 자바스크립트에서는 허용되지만 타입스크립트에서는 문제가 되는 경우도 있습니다. 이러한 문법의 엄격함은 온전히 취향 차이이며 우열을 가릴 수 없는 문제입니다.</li>\\n</ul>\\n<h2>아이템2 타입스크립트 설정 이해하기</h2>\\n<ul>\\n<li>타입스크립트 컴파일러는 언어의 핵심 요소에 영향을 미치는 몇가지 설정을 포함하고 있습니다.</li>\\n<li>타입스크립트 설정은 커맨드 라인을 이용하기보다는 <code class=\\\"language-text\\\">tsconfig.json</code>을 사용하는 것이 좋습니다.</li>\\n<li>자바스크립트 프로젝트를 타입스크립트로 전환하는게 아니라면 <code class=\\\"language-text\\\">noImplicitAny</code>를 설정하는 것이 좋습니다.</li>\\n<li>“<code class=\\\"language-text\\\">undefined</code>는 객체가 아닙니다” 같은 런타임 오류를 방지하기 위해 <code class=\\\"language-text\\\">strictNullChecks</code>를 설정하는 것이 좋습니다.</li>\\n<li>타입스크립트에서 엄격한 체크를 하고 싶다면 strict 설정을 고려해야 합니다.</li>\\n</ul>\\n<h2>아이템3 코드 생성과 타입이 관계없음을 이해하기</h2>\\n<ul>\\n<li>코드 생성은 타입 시스템과 무관합니다. 타입스크립트 타입은 런타임 동작이나 성능에 영향을 주지 않습니다.</li>\\n<li>타입 오류가 존재하더라도 코드 생성(컴파일)은 가능합니다.</li>\\n<li>타입스크립트 타입은 런타임에 사용할 수 없습니다. 런타임에 타입을 지정하려면, 타입 정보 유지를 위한 별도의 방법이 필요합니다. 일반적으로는 태그된 유니온 속성 체크 방법을 사용합니다. 또는 클래스 같이 타입스크립트 타입과 런타임 값, 둘 다 제공하는 방법이 있습니다.</li>\\n</ul>\\n<h2>아이템 4 구조적 타이핑에 익숙해지기</h2>\\n<ul>\\n<li>자바스크립트가 덕 타이핑(duck typing) 기반이고 타입스크립트가 이를 모델링하기 위해 구조적 타이핑을 사용함을 이해해야 합니다. 어떤 인터페이스에 할당 가능한 값이라면 타입 선언에 명시적으로 나열된 속성들을 가지고 있을 겁니다. 타입은 봉인되어 있지 않습니다.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Vector2D</span> <span class=\\\"token punctuation\\\">{</span>\\n  x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n  y<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">calculateLength</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">:</span> Vector2D<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sqrt</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">*</span> v<span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">+</span> v<span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">*</span> v<span class=\\\"token punctuation\\\">.</span>y<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">NamedVector</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n  x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n  y<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> v<span class=\\\"token punctuation\\\">:</span> NamedVector <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Zee'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">calculateLength</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 타입스크립트 타입 시스템은 자바스크립트의 런타임 동작을 모델링</span>\\n<span class=\\\"token comment\\\">// NamedVector의 구조가 Vector2D와 호환되기 때문에 calculateLength 호출이 가능</span>\\n\\n<span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Venctor3D</span> <span class=\\\"token punctuation\\\">{</span>\\n  x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n  y<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n  z<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">normalize</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">:</span> Vector3D<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> length <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">calculateLength</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    x<span class=\\\"token punctuation\\\">:</span> v<span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">/</span> length<span class=\\\"token punctuation\\\">,</span>\\n    y<span class=\\\"token punctuation\\\">:</span> v<span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">/</span> length<span class=\\\"token punctuation\\\">,</span>\\n    z<span class=\\\"token punctuation\\\">:</span> v<span class=\\\"token punctuation\\\">.</span>z <span class=\\\"token operator\\\">/</span> length<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">normalize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> z<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// { x: 0.6, y: 0.8, z:1 };</span>\\n\\n<span class=\\\"token comment\\\">// Vector3D와 호환되는 {x, y, z} 객체로 calculateLength를 호출하면, 구조적 타이핑 관점에서</span>\\n<span class=\\\"token comment\\\">// x와 y가 있어서 Vector2D와 호환됩니다. 따라서 오류가 발생하지 발생하지 않았습니다.</span>\\n<span class=\\\"token comment\\\">// 함수를 작성할 때, 호출에 사용되는 매개변수의 속성들이 매개변수 타입에 선언된 속성만을 가질거라 생각하기 쉬움</span>\\n<span class=\\\"token comment\\\">// 이러한 타입은 봉인된(sealed) 또는 정확한(precise) 타입이라 불리우는데 타입스크립트는 아님</span>\\n<span class=\\\"token comment\\\">// 좋든 싫든 열려(open) 있음</span></code></pre>\\n      </div>\\n<ul>\\n<li>클래스 역시 구조적 타이핑 규칙을 따른다는 것을 명심해야 합니다. 클래스의 인스턴스가 예상과 다를 수 있습니다.</li>\\n<li>구조적 타이핑을 사용하면 유닛 테스팅을 손쉽게 할 수 있습니다.</li>\\n</ul>\\n<h2>아이템 5 any 타입 지양하기</h2>\\n<ol>\\n<li>\\n<p>any 타입에는 타입 안정성이 없습니다.</p>\\n</li>\\n<li>\\n<p>any는 함수 시그니처를 무시해 버립니다.</p>\\n</li>\\n<li>\\n<p>any 타입에는 언어 서비스가 적용되지 않습니다.</p>\\n</li>\\n<li>\\n<p>any타입은 코드 리팩터링 때 버그를 감춥니다.</p>\\n</li>\\n<li>\\n<p>any는 타입 설계를 감춰버립니다.</p>\\n</li>\\n<li>\\n<p>any는 타입시스템의 신뢰도를 떨어뜨립니다.</p>\\n</li>\\n<li>\\n<p>any 타입을 사용하면 타입 체커와 타입스크립트 언어 서비스를 무력화시켜 버립니다. any 타입은 진짜 문제점을 감추며, 개발 경험을 나쁘게 하고, 타입 시스템으 신뢰도를 떨어뜨립니다. 최대한 사용을 피하도록 합시다.</p>\\n</li>\\n</ol>\\n<p>출처 <a href=\\\"https://www.yes24.com/Product/Goods/102124327\\\">이펙티브 타입스크립트</a></p>\",\"fields\":{\"tagSlugs\":[\"/tags/type-script/\",\"/tags/java-script/\"]},\"frontmatter\":{\"title\":\"[이펙티브 타입스크립트] 1장 타입스크립트 알아보기\",\"tags\":[\"TypeScript\",\"JavaScript\"],\"date\":\"2022-01-18T09:15:03.284Z\",\"description\":\"타입스크립트는 자바스크립트의 상위집합입니다. 다시 말해서, 모든 자바스크립트 프로그램은 이미 타입스크립트 프로그램입니다. 반대로, 타입스크립트는 별도의 문법을 가지고 있기 때문에 일반적으로 유효한 자바스크립트 프로그램이 아닙니다.\"}}},\"pathContext\":{\"slug\":\"/posts/TypeScript/typescript-overview\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-type-script-typescript-overview.json\n// module id = 559\n// module chunks = 170747210105423"],"sourceRoot":""}