webpackJsonp([53056407370937],{558:function(n,s){n.exports={data:{site:{siteMetadata:{title:"BK's Devlog",subtitle:"I'm front-end web developer, former marketer, interested in business-oriented and scalable development. Also, passionate marathoner.",copyright:"powerd by Gatsby, theme by lumen",author:{name:"BK",email:"beom911@gmail.com",instagram:"kim.andrea.by",linkedin:"beomyeon-kim-a9b453128",github:"beomyeonandrewkim",rss:"/rss.xml",facebook:"beom911"},disqusShortname:"beomyeonandrewkim",url:"https://beomyeonandrewkim.github.io"}},markdownRemark:{id:"/Users/beomyeonandreakim/Documents/dev/beomyeonandrewkim.github.io/src/pages/articles/2022-04-03_type-name/index.md absPath of file >>> MarkdownRemark",html:'<h2>아이템 35 데이터가 아닌, API와 명세를 보고 타입 만들기</h2>\n<ul>\n<li>코드의 구석 구석까지 타입 안정성을 얻기 위해 API 또는 데이터 형식에 대한 타입 생성을 고려해야 합니다.</li>\n<li>데이터에 드러나지 않는 예외적인 경우들이 문제가 될 수 있기 때문에 데이터보다는 명세로부터 코드를 생성하는 것이 좋습니다.</li>\n</ul>\n<h2>아이템 36 해당 분야의 용어로 타입 이름 짓기</h2>\n<ul>\n<li>가독성을 높이고, 추상화 수준을 올리기 위해서 해당 분야의 용어를 사용해야 합니다.</li>\n<li>같은 의미에 다른 이름을 붙이면 안 됩니다. 특별한 의미가 있을 때만 용어를 구분해야 합니다.</li>\n</ul>\n<h2>아이템 37 공식 명칭에는 상표를 붙이기</h2>\n<ul>\n<li>타입스크립트는 구조적 타이핑(덕 타이핑)을 사용하기 때문에, 값을 세밀하게 구분하지 못하는 경우가 있습니다. 값을 구분하기 위해 공식 명칭이 필요하다면 상표를 붙이는 것을 고려해야 합니다.</li>\n<li>상표 기법은 타입 시스템에서 동작하지만 런타임에 상표를 검사하는 것과 동일한 효과를 얻을 수 있습니다.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">Vector2D</span> <span class="token punctuation">{</span>\n  x<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  y<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">calculateNorm</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> Vector2D<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x <span class="token operator">*</span> p<span class="token punctuation">.</span>x <span class="token operator">+</span> p<span class="token punctuation">.</span>y <span class="token operator">*</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">calculateNorm</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 정상, 결과는 5</span>\n<span class="token keyword">const</span> vec3D <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">calculateNorm</span><span class="token punctuation">(</span>vec3D<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 정상! 결과는 동일하게 5</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Vector2D</span> <span class="token punctuation">{</span>\n  _brand<span class="token punctuation">:</span> <span class="token string">\'2d\'</span><span class="token punctuation">;</span>\n  x<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  y<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">vec2D</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Vector2D <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> _brand<span class="token punctuation">:</span> <span class="token string">\'2d\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">calculateNorm</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> Vector2D<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x <span class="token operator">*</span> p<span class="token punctuation">.</span>x <span class="token operator">+</span> p<span class="token punctuation">.</span>y <span class="token operator">*</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">calculateNorm</span><span class="token punctuation">(</span><span class="token function">vec2D</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> vec3D <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">calculateNorm</span><span class="token punctuation">(</span>vec3D<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'_brand\' 속성이 ... 형식에 없습니다.</span>\n\n<span class="token comment">// 상표 기법은 타입 시스템에서 동작하지만 런타임에 상표를 검색하는 것과 동일한 효과를 얻을 수 있습니다</span>\n<span class="token comment">// 타입 시스템이기 때문에 런타임 오버헤드를 없앨 수 있고 추가 속성을 붙일 수 없는 string이나 number 같은 내장 타입도 상표화 가능</span>\n\n<span class="token keyword">type</span> AbsolutePath <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> _brand<span class="token punctuation">:</span> <span class="token string">\'abs\'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">listAbsolutePath</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> Absolute<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">isAbsolutePath</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> path is Absolute <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">\'/\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// path 값이 절대 경로와 상대 경로 둘다 될 수 있다면, 타입을 정제해 주는 타입 가드를 사용해서 오류를 방지할 수 있다.</span></code></pre>\n      </div>\n<p>출처 <a href="https://www.yes24.com/Product/Goods/102124327">이펙티브 타입스크립트</a></p>',fields:{tagSlugs:["/tags/type-script/","/tags/java-script/"]},frontmatter:{title:"[이펙티브 타입스크립트] 아이템 35, 47, 47 - 타입 이름",tags:["TypeScript","JavaScript"],date:"2022-04-03T09:15:03.284Z",description:"코드의 구석 구석까지 타입 안정성을 얻기 위해 API 또는 데이터 형식에 대한 타입 생성을 고려해야 합니다."}}},pathContext:{slug:"/posts/TypeScript/type-name"}}}});
//# sourceMappingURL=path---posts-type-script-type-name-efc24fe99dc1dfe5d78b.js.map